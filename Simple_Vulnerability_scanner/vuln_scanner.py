import socket
import ipaddress
import json


def scan_ports(target_ip, port_list):
    """Scans specified ports on a target IP for open connections."""
    open_ports = []
    for port in port_list:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)  # Set a timeout for the connection attempt
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    open_ports.append(port)
        except socket.gaierror:
            print(f"Error: Invalid hostname/IP address: {target_ip}")
            return None  # Indicate an error
        except Exception as e:
            print(f"Error scanning port {port}: {e}")
    return open_ports

def detect_services(open_ports):
    """Identifies potential services based on open ports (basic mapping)."""
    service_map = {
        21: "ftp",
        22: "ssh",
        23: "telnet",
        80: "http",
        443: "https",
        25: "smtp"
    }
    detected_services = [service_map.get(port) for port in open_ports if service_map.get(port)] 
    return detected_services

def assess_vulnerabilities(services):
    vulnerability_info = {
        "ftp": "FTP is generally considered insecure.  Consider using SFTP.",
        "ssh": "Ensure SSH is configured with strong passwords or, ideally, key-based authentication. Keep SSH software updated.",
        "telnet": "Telnet transmits data in cleartext and is highly insecure. Use SSH instead.",
        "http": "HTTP websites should use HTTPS (HTTP Secure) to encrypt traffic. Check for outdated web server software.",
        "https": "While HTTPS encrypts traffic, misconfigurations or outdated, Regular security assessments are important. ",
        "smtp": "Ensure your SMTP server is properly configured."
    }
    vulnerabilities = {service: vulnerability_info[service] for service in services if service in vulnerability_info}
    return vulnerabilities

def generate_report(target_ip, open_ports, vulnerabilities):
    """Generates a JSON report of the scan results."""
    report = {
        "target_ip": target_ip,
        "open_ports": open_ports,
        "vulnerabilities": vulnerabilities
    }
    filename = f"{target_ip}_scan_report.json"
    try:
        with open(filename, "w") as f:
            json.dump(report, f, indent=4)
        print(f"Report saved to {filename}")
    except Exception as e:
        print(f"Error creating report: {e}")


def main():
    while True:
        target_ip = input("Enter target IP address: ").strip()
        try:
            ipaddress.ip_address(target_ip) # Validate the IP Address
            break 
        except ValueError:
            print("Invalid IP address format. Please try again.")

    common_ports = [21, 22, 23, 80, 443, 25] 
    open_ports = scan_ports(target_ip, common_ports)

    if open_ports is None:  # Handle invalid IP
        return

    if open_ports:
        print(f"Open ports found: {open_ports}")
        detected_services = detect_services(open_ports)
        if detected_services:
          print(f"Potentially running services: {detected_services}")
          vulnerabilities = assess_vulnerabilities(detected_services)
          if vulnerabilities:
            print("Potential vulnerabilities:")
            for service, description in vulnerabilities.items():
              print(f"- {service}: {description}")

          generate_report(target_ip, open_ports, vulnerabilities)

        else:
          print("No identifiable services found on the open ports.")
    else:
        print("No open ports found.")


if __name__ == "__main__":
    main()
